----Note sul Parser di Eloy 30/12/2022---

Classe Monomial (righe 5-47)
	Le nostre funzioni sono combinazioni di monomi del tipo seguente:
		r*(sin(x))^a(cos(x))^b*(sin(y))^c(cos(x))^d
		con a,b,c,d naturali (o reali non negativi anche..), r reale
			Nota: fissiamo qui un ordine nel monomio che quindi è univocamente
			determinato dalla tupla (r,a,b,c,d)
			Dubbio: non ho capito a che serve porre tutto a 0 se r=0, vabbe
	In questa classe ci sono due metodi: dx e dy, per il calcolo della 
	derivata, rispettivamente rispetto alla x e rispetto alla y, del monomio.
		Dubbio: in dx viene restituita la tupla (dx1,dx2) dove dx1 è la 
			derivata relativa a cos(x) e dx2 la derivata relativa a sin(x), 
			non dovrebbe restituire la somma dx1+dx2 ? (idem per dy)
		OK, si fa così per la struttura che ha un oggetto di HomogComp
	...Eval...

Classe HomogComp (righe 50-117)
	Dubbio preliminare: perchè ci serve distinguere le componenti omogenee?
		non basterebbe lavorare con somme di monomi?
	Un oggetto di questa classe è identificato da una lista di monomi.
		Domanda: questi sono oggetti della classe Monomial? direi Sì siccome usa i metodi
	Medodo __str__ per trasformare uno di questi oggetti in una stringa
		Serve: se implementiamo la parte grafica, per il calcolo non serve
		Dubbio: i confronti negli if potrebbero dare problemi, servono?
		Cosa fa:
			- per ogni monomio (non 0) si salva i coefficienti !={0,1}
			  e li usa per scrivere i pezzi monomiali nella stringa
			- unisce in una stringa i risultati relativi a ogni monomio
			Dubbio: perchè "if coeffs[1] == 1: coeffs[1] = '' " ?
					non dovrebbe essere "if coeffs[1] == 1:  strlist.append('sen x ') "
				Idem per gli altri fattori del monomio
	Metodi dx e dy: calcolano la derivata, ovvero un oggetto della classe
		HomogComp, una lista le cui entrate sono i monomi dati dall'applicazione
		del metodo di derivazione di Monomial. OK.
	...Eval...
	
Per me il programma che calcola le derivate finisce qui.
A che serve myPolynomial????

Classe myPolynomial (righe 119-200)
	Un oggetto è determinato da un dizionario in cui le chiavi sono i 
		gradi e i valori sono le componenti omogenee
	Metodo __str__: mi scrive le componenti omogenee in ordine di grado
		esattamente come il metodo di HomogComp
parse (righe 203-266)
	- Splitta quando vede un +, ma se scrivo -4cos(x)?
	- Non capisco percè continuiamo a dividere per componenti omogenee
	- Non va bene " if len(mono) == 1:#È un termine di grado 0" se ha coeff 14?
	- Non ci possono essere monomi di lughezza 0 se splitto ai + e l'utente non è un cretino
	- for "f in mono" scorre i caratteri? che cosa vuol dire "f=f[:-1]"?
	- L'ultimo carattere di ogni mono in msg è +?
BOh..io rifaccio il parse.. così non ha senso
	

		
		
		